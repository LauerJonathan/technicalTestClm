const Admin = require("../models/Admin");
const bcrypt = require("bcrypt");
const crypto = require("crypto");

const createDefaultAdmin = async () => {
  try {
    // V√©rifier si un admin existe d√©j√†
    const adminCount = await Admin.count();
    
    if (adminCount === 0) {
      let adminPassword = "Admin123!"; // Mot de passe par d√©faut pour le d√©veloppement
      
      // En production, g√©n√©rer un mot de passe al√©atoire => A MODIFIER PAR L'UTILISATEUR A LA 1 CO
      if (process.env.NODE_ENV === "production") {
        adminPassword = crypto.randomBytes(12).toString('hex') + "A1!";
      }
      
      // Cr√©er l'admin par d√©faut
      const hashedPassword = await bcrypt.hash(adminPassword, 12);
      
      await Admin.create({
        username: "admin",
        email: "admin@babyfoot.com",
        password: hashedPassword,
      }, {
        // √âviter de d√©clencher √† nouveau le hook beforeCreate qui hasherait un mot de passe d√©j√† hash√©
        hooks: false
      });
      
      // N'afficher le mot de passe que dans les environnements de d√©veloppement
      if (process.env.NODE_ENV !== "production") {
        console.log("üîë : Test identifiers");
        console.log("Email: admin@babyfoot.com");
        console.log("Mot de passe: " + adminPassword);
      } else {
        console.log("‚úÖ Administrateur par d√©faut cr√©√© avec un mot de passe s√©curis√©");
        console.log("Pour des raisons de s√©curit√©, veuillez utiliser la fonctionnalit√© de r√©initialisation de mot de passe");
      }
    } else {
      console.log("‚ÑπÔ∏è Des administrateurs existent d√©j√†, aucun administrateur par d√©faut cr√©√©");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation de l'administrateur par d√©faut:", error);
  }
};

module.exports = { createDefaultAdmin };